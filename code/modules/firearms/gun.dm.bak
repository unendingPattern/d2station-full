/obj/item/weapon/gun
	name = "gun"
	desc = "Its a gun. It's pretty terrible, though."
	icon = 'gun.dmi'
	icon_state = "detective"
	item_state = "gun"
	flags =  FPRINT | TABLEPASS | CONDUCT | ONBELT | USEDELAY
	m_amt = 2000
	w_class = 3.0
	throwforce = 5
	throw_speed = 4
	throw_range = 5
	force = 5.0//They now do the ave damage
	origin_tech = "combat=1"

	var
		fire_sound = 'Gunshot.ogg'
		obj/item/projectile/in_chamber
		caliber = ""
		silenced = 0
		badmin = 0
		recoil = 0
		burst_size = 1		//How many rounds are fired at once
		burst_delay = 4
		locked = ""			//Type of implant needed for weapon operation, "" = no implant
	proc
		load_into_chamber()
		badmin_ammo()
		special_check(var/mob/M)
		eject_casing()


	load_into_chamber()
		in_chamber = new /obj/item/projectile/weakbullet(src)
		return 1


	badmin_ammo() //CREEEEEED!!!!!!!!!
		switch(badmin)
			if(1)
				in_chamber = new /obj/item/projectile/electrode(src)
			if(2)
				in_chamber = new /obj/item/projectile/weakbullet(src)
			if(3)
				in_chamber = new /obj/item/projectile(src)
			if(4)
				in_chamber = new /obj/item/projectile/beam(src)
			if(5)
				in_chamber = new /obj/item/projectile/beam/pulse(src)
			else
				return 0
		if(!istype(src, /obj/item/weapon/gun/energy))
			var/obj/item/ammo_casing/AC = new(get_turf(src))
			AC.name = "bullet casing"
			AC.desc = "This casing has the NT Insignia etched into the side."
		return 1


	special_check(var/mob/M) //Placeholder for any special checks, like detective's revolver.
		return 1


	emp_act(severity)
		for(var/obj/O in contents)
			O.emp_act(severity)


	eject_casing()
		return


	attack(mob/M as mob, mob/living/user as mob)
		if(user.a_intent == "hurt")
			add_fingerprint(user)

			if(locked)
				if (istype(src.loc, /mob/living/carbon/human))
					var/mob/living/carbon/human/H = user
					var/list/implants = list() //Checking for a certain implant.
					for(var/obj/item/weapon/implant/W in H)
						if(locked == "[W.type]")
							implants += W
					if(!implants.len)
						var/datum/effects/system/spark_spread/s = new /datum/effects/system/spark_spread
						s.set_up(2, 1, H.loc)
						s.start()
						H.stunned += 3
						H.weakened += 3
						H << "\red The gun zaps you!"
						return

			if(badmin)
				badmin_ammo()
			else if(!special_check(user))
				return
			else if(!load_into_chamber())
				user << "\red *click* *click*"
				for(var/mob/O in oviewers(M, null))
					if(O.client)	O.show_message(text("\red <B>[] tries to shoot [] point-blank, but the [] is empty!</B>", user, M, name), 1)
				return

			pblank_loop:

				sleep(burst_delay)

				var/temp_burst_size
				if(istype(src, /obj/item/weapon/gun/projectile) && burst_size > 1)
					temp_burst_size = burst_size - 1
				else
					temp_burst_size = burst_size

				for(var/i = 0; i < temp_burst_size; i++)

					if(silenced)
						playsound(user, fire_sound, 10, 1)
					else
						playsound(user, fire_sound, 50, 1)

					if(istype(user, /mob/living/carbon/human) && istype(src, /obj/item/weapon/gun/projectile))
						if(!istype(user:ears, /obj/item/clothing/ears/earmuffs))
							user << "\red Your ears ring!"
							user.ear_damage += 5
							user.ear_deaf += 1

					if(istype(M, /mob/living/carbon/human) && istype(src, /obj/item/weapon/gun/projectile))
						if(!istype(M:ears, /obj/item/clothing/ears/earmuffs))
							M << "\red Your ears ring!"
							M.ear_damage += 5
							M.ear_deaf += 1

					for(var/mob/O in viewers(M, null))
						if(!istype(user.loc, /turf/space))
							if(in_chamber.def_zone)
								if(O.client)	O.show_message(text("\red <B>[] has been shot point-blank in the [] by []!</B>", M, in_chamber.def_zone, user), 1, "\red You hear a gunshot", 2)
							else
								if(O.client)	O.show_message(text("\red <B>[] has been shot point-blank by []!</B>", M, user), 1, "\red You hear a gunshot", 2)

					if(istype(src, /obj/item/weapon/gun/projectile))
						eject_casing()

					M.bullet_act(in_chamber)
					sleep(1)
					del(in_chamber)
					in_chamber = null
					update_icon()

					if(burst_size > 1)
						if(badmin)
							badmin_ammo()
						else if(!special_check(user))
							return
						else if(!load_into_chamber())
							user << "\red *click* *click*";
							return
						continue pblank_loop
		else
			..()
		return


	afterattack(atom/target as mob|obj|turf|area, mob/living/user as mob|obj, flag)//TODO: go over this
		if (flag)
			return //we're placing gun on a table or in backpack --rastaf0
		if(istype(target, /obj/machinery/recharger) && istype(src, /obj/item/weapon/gun/energy))
			return
		if(istype(user, /mob/living))
			var/mob/living/M = user
			if ((M.mutations & CLOWN) && prob(50))
				M << "\red The [src.name] blows up in your face."
				M.take_organ_damage(0,20)
				M.drop_item()
				del(src)
				return
		if (!user.IsAdvancedToolUser())
			user << "\red You don't have the dexterity to do this!"
			return

		if(locked)
			if (istype(src.loc, /mob/living/carbon/human))
				var/mob/living/carbon/human/H = user
				var/list/implants = list() //Checking for a certain implant.
				for(var/obj/item/weapon/implant/W in H)
					if(locked == "[W.type]")
						implants += W
				if(!implants.len)
					var/datum/effects/system/spark_spread/s = new /datum/effects/system/spark_spread
					s.set_up(2, 1, H.loc)
					s.start()
					H.stunned += 3
					H.weakened += 3
					H << "\red The gun zaps you!"
					return

		if(badmin)
			badmin_ammo()
		else if(!special_check(user))
			return
		else if(!load_into_chamber())
			user << "\red *click* *click*";
			return

		add_fingerprint(user)

		var/turf/curloc = user.loc
		var/turf/targloc = get_turf(target)
		if (!istype(targloc) || !istype(curloc))
			return

		burst_loop:

			sleep(burst_delay)

			if(istype(src, /obj/item/weapon/gun/projectile/shotgun))//TODO: Get this out of here, parent objects should check child types as little as possible
				var/obj/item/weapon/gun/projectile/shotgun/S = src
				if(S.pumped >= S.maxpump)
					S.pump()
					return

			if(istype(src, /obj/item/weapon/gun/energy/phaser))
				var/obj/item/weapon/gun/energy/phaser/P = src
				in_chamber:radius = P.radius
				in_chamber:power = P.power
				in_chamber:loaded_effect = P.loaded_effect

			if(istype(src, /obj/item/weapon/gun/energy/freeze))
				var/obj/item/projectile/freeze/F = in_chamber
				var/obj/item/weapon/gun/energy/freeze/Fgun = src
				F.temperature = Fgun.temperature

			if(istype(in_chamber, /obj/item/weapon/chem_grenade))
				in_chamber.attack_self(user)
				in_chamber.loc = get_turf(user)
				in_chamber.throw_at(targloc, 8, 2)
				in_chamber = null

			var/temp_burst_size
//			if(istype(src, /obj/item/weapon/gun/projectile) && burst_size > 1)
//				temp_burst_size = burst_size
//			else
			temp_burst_size = burst_size

			for(var/i = 0; i < temp_burst_size; i++)

				if(silenced)
					playsound(user, fire_sound, 10, 1)
				else
					playsound(user, fire_sound, 50, 1)

				if(istype(user, /mob/living/carbon/human) && istype(src, /obj/item/weapon/gun/projectile))
					if(!istype(user:ears, /obj/item/clothing/ears/earmuffs))
						user << "\red Your ears ring!"
						user.ear_damage += 1
						user.ear_deaf += 1

				if(!in_chamber)
					return

				if(istype(in_chamber, /obj/item/projectile))
					in_chamber.firer = user
					in_chamber.def_zone = user.get_organ_target()

				if(targloc == curloc)
					user.bullet_act(in_chamber)
					del(in_chamber)
					update_icon()
					return

				if(recoil)
					spawn()
						shake_camera(user, recoil + 1, recoil)

				if(istype(in_chamber, /obj/item/projectile))
					in_chamber.original = targloc
					in_chamber.loc = get_turf(user)
					user.next_move = world.time + 4
					in_chamber.silenced = silenced
					in_chamber.current = curloc
					in_chamber.yo = targloc.y - curloc.y
					in_chamber.xo = targloc.x - curloc.x

					spawn()
						in_chamber.process()
				sleep(1)
				in_chamber = null

				if(istype(src, /obj/item/weapon/gun/projectile))
					eject_casing()

				update_icon()

				if(burst_size > 1)
					if(badmin)
						badmin_ammo()
					else if(!special_check(user))
						return
					else if(!load_into_chamber())
						user << "\red *click* *click*";
						return
					continue burst_loop

		if(istype(src, /obj/item/weapon/gun/projectile/shotgun))
			var/obj/item/weapon/gun/projectile/shotgun/S = src
			S.pumped++
		return



/obj/item/weapon/gun/projectile
	desc = "A classic revolver. Uses 357 ammo"
	name = "revolver"
	icon_state = "revolver"
	caliber = "357"
	origin_tech = "combat=2;materials=2;syndicate=6"
	w_class = 3.0
	m_amt = 1000

	var
		list/loaded = list()
		max_shells = 7
		load_method = 0 //0 = Single shells or quick loader, 1 = magazine
		obj/item/ammo_magazine/loaded_magazine

		// Shotgun variables
		pumped = 0
		maxpump = 1

		list/Storedshots = list()

	load_into_chamber()

		if(istype(src, /obj/item/weapon/gun/projectile/shotgun) && pumped >= maxpump)
			return 1

		if(in_chamber)
			return 1

		if(load_method && loaded_magazine)
			if(loaded_magazine.stored_ammo.len)
				var/obj/item/ammo_casing/AMC = loaded_magazine.stored_ammo[1]
				loaded_magazine.stored_ammo -= AMC	//Remove the casing from the magazine
				loaded += AMC
				AMC.loc = src			//Move the casing from the magazine to the gun
				loaded_magazine.update_icon()
				if(AMC.BB)
					in_chamber = AMC.BB //Load projectile into chamber.
					AMC.BB.loc = src	//Set projectile loc to gun.
					return 1

		if(!load_method)
			if(loaded.len)
				var/obj/item/ammo_casing/AC = loaded[1]
				if(AC.BB)
					in_chamber = AC.BB		//Load projectile into chamber.
					AC.BB.loc = src			//Set projectile loc to gun.
					return 1

		if(!loaded.len)
			if(Storedshots.len > 0)
				if(istype(src, /obj/item/weapon/gun/projectile/shotgun))
					var/obj/item/weapon/gun/projectile/shotgun/S = src
					S.pump(loc)
			return 0

		else
			return 0

	eject_casing()
		if(loaded.len)
			var/obj/item/ammo_casing/AC = loaded[1] //target top casing in list.
			loaded -= AC //Remove casing from loaded list.
			if(!istype(src, /obj/item/weapon/gun/projectile/shotgun))
				AC.loc = get_turf(src)	//Eject casing onto ground.
			else
				Storedshots += AC

	New()
		for(var/i = 1, i <= max_shells, i++)
			loaded += new /obj/item/ammo_casing(src)
		update_icon()

	attackby(var/obj/item/A as obj, mob/user as mob)
		var/num_loaded = 0
		if(istype(A, /obj/item/ammo_box) && !load_method)
			var/obj/item/ammo_box/AB = A
			for(var/obj/item/ammo_casing/AC in AB.stored_ammo)
				if(loaded.len >= max_shells)
					break
				if(AC.caliber == caliber && loaded.len < max_shells)
					AC.loc = src
					AB.stored_ammo -= AC
					loaded += AC
					num_loaded++
		else if(istype(A, /obj/item/ammo_casing) && !load_method)
			var/obj/item/ammo_casing/AC = A
			if(AC.caliber == caliber && loaded.len < max_shells)
				user.drop_item()
				AC.loc = src
				loaded += AC
				num_loaded++
		else if(istype(A, /obj/item/ammo_magazine) && load_method && !loaded_magazine)
			var/obj/item/ammo_magazine/AM = A
			if(AM.caliber == caliber)
				user.drop_item()
				AM.loc = src
				loaded_magazine = AM
				user << text("\blue You load the [] into the []!", AM.name, name)
		if(istype(A, /obj/item/weapon/card/emag) && locked)
			locked = ""
			user << text("\red You short out the implant lock on the []!", name)
		if(num_loaded)
			user << text("\blue You load [] shell\s into the []!", num_loaded, name)
		A.update_icon()
		update_icon()
		return

	attack_hand(mob/user as mob)
		if(user.r_hand == src || user.l_hand == src)
			if(loaded_magazine)
				loaded_magazine.loc = user
				if(user.hand)
					user.l_hand = loaded_magazine
				else
					user.r_hand = loaded_magazine
				user << text("\blue You unload the [].", name)
				loaded_magazine.layer = 20
				loaded_magazine = null
				update_icon()
		else
			return ..()

	update_icon()
		if(load_method && loaded_magazine)
			desc = initial(desc) + text(" Has [] rounds remaining.", loaded.len + loaded_magazine.stored_ammo.len)
			icon_state = text("[]_mag", initial(icon_state))
		else
			desc = initial(desc) + text(" Has [] rounds remaining.", loaded.len)
			icon_state = text("[]", initial(icon_state))


/obj/item/weapon/gun/energy
	icon_state = "energy"
	name = "energy gun"
	desc = "A basic energy-based gun with two settings: Stun and kill."
	fire_sound = 'Taser.ogg'
	caliber = "energy"
	var
		var/obj/item/ammo_magazine/energy/power_supply
		var/removable_mag = 0
		mode = 0 //0 = stun, 1 = kill
		charge_cost = 100 //How much energy is needed to fire.

	emp_act(severity)
		power_supply.use(round(power_supply.maxcharge / severity))
		update_icon()
		..()

	New()
		power_supply = new(src)
		power_supply.give(power_supply.maxcharge)

	load_into_chamber()
		if(in_chamber)
			return 1
		if(!power_supply)
			return 0
		if(power_supply.charge < charge_cost)
			return 0
		switch (mode)
			if(0)
				in_chamber = new /obj/item/projectile/electrode(src)
			if(1)
				in_chamber = new /obj/item/projectile/beam(src)
		power_supply.use(charge_cost)
		return 1

	attack_self(mob/living/user as mob)
		switch(mode)
			if(0)
				mode = 1
				charge_cost = 100
				fire_sound = 'Laser.ogg'
				user << "\red [src.name] is now set to kill."
			if(1)
				mode = 0
				charge_cost = 100
				fire_sound = 'Taser.ogg'
				user << "\red [src.name] is now set to stun."
		update_icon()
		return

	attack_hand(mob/user as mob)
		if(user.r_hand == src || user.l_hand == src)
			if(power_supply && removable_mag)
				power_supply.loc = user
				if(user.hand)
					user.l_hand = power_supply
				else
					user.r_hand = power_supply
				user << text("\blue You unload the [].", name)
				power_supply.layer = 20
				power_supply = null
				update_icon()
		else
			return ..()

	attackby(var/obj/item/A as obj, mob/user as mob)
		if(istype(A, /obj/item/weapon/card/emag) && locked)
			locked = ""
			user << "\red You short out the implant lock on the gun!"
		else if(istype(A, /obj/item/ammo_magazine/energy) && removable_mag && !power_supply)
			var/obj/item/ammo_magazine/energy/EM = A
			if(EM.caliber == caliber)
				user.drop_item()
				EM.loc = src
				power_supply = EM
				user << text("\blue You load the [] into the []!", EM.name, name)
		update_icon()

	update_icon()
		var/ratio = power_supply.charge / power_supply.maxcharge
		ratio = round(ratio, 0.25) * 100
		icon_state = text("[][]", initial(icon_state), ratio)